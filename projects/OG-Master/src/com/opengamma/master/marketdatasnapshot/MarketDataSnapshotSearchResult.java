/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.master.marketdatasnapshot;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.OpenGammaRuntimeException;
import com.opengamma.core.marketdatasnapshot.impl.ManageableMarketDataSnapshot;
import com.opengamma.master.AbstractSearchResult;
import com.opengamma.util.PublicSPI;

/**
 * Result from searching for snapshots.
 * <p>
 * The returned documents will match the search criteria.
 * See {@link MarketDataSnapshotSearchRequest} for more details.
 */
@PublicSPI
@BeanDefinition
public class MarketDataSnapshotSearchResult extends AbstractSearchResult<MarketDataSnapshotDocument> {


  /**
   * Creates an instance.
   */
  public MarketDataSnapshotSearchResult() {
  }

  /**
   * Creates an instance from a collection of documents.
   * 
   * @param coll  the collection of documents to add, not null
   */
  public MarketDataSnapshotSearchResult(Collection<MarketDataSnapshotDocument> coll) {
    super(coll);
  }

  //-------------------------------------------------------------------------
  /**
   * Gets the returned marketDataSnapshots from within the documents.
   * 
   * @return the marketDataSnapshots, not null
   */
  public List<ManageableMarketDataSnapshot> getMarketDataSnapshots() {
    List<ManageableMarketDataSnapshot> result = new ArrayList<ManageableMarketDataSnapshot>();
    if (getDocuments() != null) {
      for (MarketDataSnapshotDocument doc : getDocuments()) {
        result.add(doc.getSnapshot());
      }
    }
    return result;
  }

  /**
   * Gets the first marketDataSnapshot, or null if no documents.
   * 
   * @return the first marketDataSnapshot, null if none
   */
  public ManageableMarketDataSnapshot getFirstMarketDataSnapshot() {
    return getDocuments().size() > 0 ? getDocuments().get(0).getSnapshot()  : null;
  }

  /**
   * Gets the single result expected from a query.
   * <p>
   * This throws an exception if more than 1 result is actually available.
   * Thus, this method implies an assumption about uniqueness of the queried marketDataSnapshot.
   * 
   * @return the matching marketDataSnapshot, not null
   * @throws IllegalStateException if no marketDataSnapshot was found
   */
  public ManageableMarketDataSnapshot getSingleMarketDataSnapshot() {
    if (getDocuments().size() != 1) {
      throw new OpenGammaRuntimeException("Expecting zero or single resulting match, and was " + getDocuments().size());
    } else {
      return getDocuments().get(0).getSnapshot();
    }
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code MarketDataSnapshotSearchResult}.
   * @return the meta-bean, not null
   */
  @SuppressWarnings("unchecked")
  public static MarketDataSnapshotSearchResult.Meta meta() {
    return MarketDataSnapshotSearchResult.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(MarketDataSnapshotSearchResult.Meta.INSTANCE);
  }

  @Override
  public MarketDataSnapshotSearchResult.Meta metaBean() {
    return MarketDataSnapshotSearchResult.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      return super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code MarketDataSnapshotSearchResult}.
   */
  public static class Meta extends AbstractSearchResult.Meta<MarketDataSnapshotDocument> {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map = new DirectMetaPropertyMap(
      this, (DirectMetaPropertyMap) super.metaPropertyMap());

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    public BeanBuilder<? extends MarketDataSnapshotSearchResult> builder() {
      return new DirectBeanBuilder<MarketDataSnapshotSearchResult>(new MarketDataSnapshotSearchResult());
    }

    @Override
    public Class<? extends MarketDataSnapshotSearchResult> beanType() {
      return MarketDataSnapshotSearchResult.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
