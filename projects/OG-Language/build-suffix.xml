<project name="build-suffix" xmlns:ivy="antlib:org.apache.ivy.ant">

  <path id="build.path">
    <path refid="java.build.path" />
    <path refid="cc.build.path" />
    <path refid="cctest.build.path" />
    <path refid="javatest.build.path" />
  </path>

  <macrodef name="unpack-zip">
    <attribute name="org" />
    <attribute name="name" />
    <attribute name="type" />
    <sequential>
      <unzip dest="${lib.dir}/@{type}" overwrite="false">
        <fileset dir="${lib.dir}/@{type}/@{org}/@{name}">
          <include name="*.zip" />
        </fileset>
      </unzip>
    </sequential>
  </macrodef>
  <macrodef name="unpack-dll">
    <attribute name="org" />
    <attribute name="name" />
    <attribute name="file" />
    <attribute name="debug" default="" />
    <attribute name="release" default="" />
    <attribute name="win32" default="" />
    <attribute name="x64" default="" />
    <sequential>
      <copy tofile="${lib.dir}/dll/DebugWin32/@{file}@{win32}@{debug}.dll" overwrite="false">
        <fileset dir="${lib.dir}/dll/@{org}/@{name}">
          <include name="@{name}-DebugWin32-*.dll" />
        </fileset>
      </copy>
      <copy tofile="${lib.dir}/dll/ReleaseWin32/@{file}@{win32}@{release}.dll" overwrite="false">
        <fileset dir="${lib.dir}/dll/@{org}/@{name}">
          <include name="@{name}-ReleaseWin32-*.dll" />
        </fileset>
      </copy>
      <copy tofile="${lib.dir}/dll/Debugx64/@{file}@{x64}@{debug}.dll" overwrite="false">
        <fileset dir="${lib.dir}/dll/@{org}/@{name}">
          <include name="@{name}-Debugx64-*.dll" />
        </fileset>
      </copy>
      <copy tofile="${lib.dir}/dll/Releasex64/@{file}@{x64}@{release}.dll" overwrite="false">
        <fileset dir="${lib.dir}/dll/@{org}/@{name}">
          <include name="@{name}-Releasex64-*.dll" />
        </fileset>
      </copy>
    </sequential>
  </macrodef>
  <macrodef name="unpack-lib">
    <attribute name="org" />
    <attribute name="name" />
    <attribute name="file" />
    <sequential>
      <copy tofile="${lib.dir}/lib/DebugWin32/@{file}.lib" overwrite="false">
        <fileset dir="${lib.dir}/lib/@{org}/@{name}">
          <include name="@{name}-DebugWin32-*.lib" />
        </fileset>
      </copy>
      <copy tofile="${lib.dir}/lib/ReleaseWin32/@{file}.lib" overwrite="false">
        <fileset dir="${lib.dir}/lib/@{org}/@{name}">
          <include name="@{name}-ReleaseWin32-*.lib" />
        </fileset>
      </copy>
      <copy tofile="${lib.dir}/lib/Debugx64/@{file}.lib" overwrite="false">
        <fileset dir="${lib.dir}/lib/@{org}/@{name}">
          <include name="@{name}-Debugx64-*.lib" />
        </fileset>
      </copy>
      <copy tofile="${lib.dir}/lib/Releasex64/@{file}.lib" overwrite="false">
        <fileset dir="${lib.dir}/lib/@{org}/@{name}">
          <include name="@{name}-Releasex64-*.lib" />
        </fileset>
      </copy>
    </sequential>
  </macrodef>
  <condition property="is.windows" value="true"><os family="windows" /></condition>
  <target name="unpack-resolve-impl-posix" unless="is.windows">
    <mkdir dir="${lib.dir}/lib/Debug" />
    <mkdir dir="${lib.dir}/lib/Release" />
  </target>
  <target name="unpack-resolve-impl-windows" if="is.windows">
    <ivy:artifactproperty name="[organization].[module].[type]" value="[revision]" />
    <antcall target="unpack-resolve-impl-windows2" />
  </target>
  <target name="unpack-resolve-impl-windows2" if="org.fudgemsg.fudge-c.lib">
    <unpack-dll org="org.fudgemsg" name="fudge-c" file="libfudgec" debug="d" x64="X64" />
    <unpack-zip org="org.fudgemsg" name="fudge-c" type="include" />
    <unpack-lib org="org.fudgemsg" name="fudge-c" file="libfudgec" />
    <unpack-dll org="org.apache" name="log4cxx" file="log4cxx" />
    <unpack-zip org="org.apache" name="log4cxx" type="include" />
    <unpack-lib org="org.apache" name="log4cxx" file="log4cxx" />
    <unpack-dll org="org.apache" name="apr" file="apr" />
    <unpack-dll org="org.apache" name="apr-util" file="aprutil" />
  </target>
  <target name="unpack-resolve" depends="resolve,unpack-resolve-impl-posix,unpack-resolve-impl-windows" description="Unpacks include files and Windows binaries" />

  <condition property="env.IVY_SHARED_DEFAULT_ROOT_DEFAULT" value="${env.IVY_SHARED_DEFAULT_ROOT_WINDOWS}" else="${env.IVY_SHARED_DEFAULT_ROOT_NONWINDOWS}"><os family="windows" /></condition>
  <condition property="env.IVY_SHARED_DEFAULT_ROOT" value="${env.IVY_SHARED_DEFAULT_ROOT_DEFAULT}"><not><isset property="env.IVY_SHARED_DEFAULT_ROOT" /></not></condition>
  <import file="${common.dir}/common-ivy.xml" />

  <target name="deploy-jars">
    <mkdir dir="${build.dir}/jar" />
    <ivy:retrieve pattern="${build.dir}/jar/[organization]-[module]-[artifact].[ext]" type="jar" />
  </target>

  <target name="set-version">
    <echo file="${basedir}/.version">module.version=${module.version.target}</echo>
    <replaceregexp file="${basedir}/.version" match="(=\d+\.\d+\.\d+)\w*$" replace="\1" />
    <property file="${basedir}/.version" />
    <delete file="${basedir}/.version" />
    <echo file="${basedir}/version.h">// Automatically generated file -- do not modify

#ifndef __inc_og_language_version_h
#define __inc_og_language_version_h

#define VERSION_MAJOR  vermajor${module.version}
#define VERSION_MINOR  verminor${module.version}
#define REVISION  revision${module.version}
#ifndef BUILD_NUMBER
#define BUILD_NUMBER  ${build.number}
#endif /* ifndef BUILD_NUMBER */
#ifndef VERSION_SUFFIX
#ifdef _DEBUG
#define VERSION_SUFFIX  "-Debug"
#else /* ifdef _DEBUG */
#define VERSION_SUFFIX  ""
#endif /* ifdef _DEBUG */
#endif /* ifndef VERSION_SUFFIX */
#include &lt;Util/Quote.h&gt;
#define VERSION    TEXT(QUOTE(VERSION_MAJOR)) TEXT(".") TEXT(QUOTE(VERSION_MINOR)) TEXT(".") TEXT(QUOTE(REVISION)) TEXT(".") TEXT(QUOTE(BUILD_NUMBER)) TEXT(VERSION_SUFFIX)

#endif /* ifndef __inc_og_language_version_h */
    </echo>
    <replaceregexp file="${basedir}/version.h" match="vermajor(\d+)\.\d+\.\d+" replace="\1" flags="m" />
    <replaceregexp file="${basedir}/version.h" match="verminor\d+\.(\d+)\.\d+" replace="\1" flags="m" />
    <replaceregexp file="${basedir}/version.h" match="revision\d+\.\d+\.(\d+)" replace="\1" flags="m" />
  </target>

  <target name="make-config">
    <property file="${common.dir}/tests.properties" />
    <property name="opengamma.configuration.url" value="http://${opengamma.engine.host}:${opengamma.engine.port}${opengamma.engine.path}jax/configuration/0/" />
    <property name="opengamma.configuration.failOnInvalid" value="true" />
    <property name="opengamma.configuration.failOnMissing" value="false" />
    <echo file="${build.dir}/OpenGamma.properties"># Build system defaults

opengamma.configuration.url=${opengamma.configuration.url}
opengamma.configuration.failOnInvalid=${opengamma.configuration.failOnInvalid}
opengamma.configuration.failOnMissing=${opengamma.configuration.failOnMissing}
    </echo>
  </target>

  <target name="compile" depends="unpack-resolve,deploy-jars,set-version" description="Compiles all components">
    <subant target="deploy" buildpathref="java.build.path" antfile="build.parent-invoked.xml">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
    <subant target="compile" buildpathref="cc.build.path">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
  </target>

  <target name="compile-tests" depends="compile" description="Compiles (but does not run) unit tests">
    <subant target="compile" buildpathref="cctest.build.path">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
    <subant target="compile-tests" buildpathref="javatest.build.path" antfile="build.parent-invoked.xml">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
  </target>

  <target name="tests" depends="unpack-resolve,deploy-jars,clean-tests,set-version" description="Compiles and runs unit tests">
    <subant target="deploy" buildpathref="java.build.path" antfile="build.parent-invoked.xml">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
    <subant target="compile" buildpathref="cc.build.path">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
    <subant target="tests" buildpathref="cctest.build.path">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
    <subant target="tests" buildpathref="javatest.build.path" antfile="build.parent-invoked.xml">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
    <mkdir dir="${basedir}/TestResults/html" />
    <junitreport todir="${basedir}/TestResults">
      <fileset dir="${basedir}" includes="*/tests/output/xml/TEST-*.xml,TestResults/TEST-*.xml" />
      <report todir="${basedir}/TestResults/html" />
    </junitreport>
  </target>

  <target name="tests-with-clover" description="Builds and runs all tests with local Clover reports generated">
    <subant target="tests-with-clover" buildpathref="javatest.build.path">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
  </target>

  <target name="local-version">
    <tstamp>
      <format property="now" pattern="yyyyMMddHHmmss" />
    </tstamp>
    <property name="version" value="${module.version.target}-local-${now}" />
    <!-- TODO: should propogate the 'now' part into the build-number -->
  </target>
  <target name="version">
    <tstamp>
      <format property="now" pattern="yyyyMMddHHmmss" />
    </tstamp>
    <property name="version" value="${module.version.target}" />
  </target>
  <target name="publish" depends="dist,version">
    <!-- TODO -->
  </target>
  <target name="publish-local" depends="dist,local-version">
    <ivy:publish  artifactspattern="${dist.dir}/[artifact].[ext]"
        resolver="local"
        pubrevision="${version}"
        pubdate="${now}"
        status="integration"
        forcedeliver="true" />
  </target>

  <target name="dist" depends="compile">
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${dist.dir}/bin" />
    <mkdir dir="${dist.dir}/include" />
    <mkdir dir="${dist.dir}/lib" />
    <subant target="dist" buildpathref="java.build.path" antfile="build.parent-invoked.xml">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
    <subant target="dist" buildpathref="cc.build.path">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
    <zip destfile="${dist.dir}/${ant.project.name}-bin.zip" basedir="${dist.dir}/bin" whenempty="create" />
    <zip destfile="${dist.dir}/${ant.project.name}-include.zip" basedir="${dist.dir}/include" whenempty="create" />
    <zip destfile="${dist.dir}/${ant.project.name}-lib.zip" basedir="${dist.dir}/lib" whenempty="create" />
  </target>

  <target name="tarball" depends="dist">
    <!-- TODO -->
  </target>
  <target name="src-tarball" />

  <target name="zipfile" depends="dist">
    <!-- TODO -->
  </target>
  <target name="src-zipfile" />
  <target name="dist-src-nodep" />
  <target name="dist-nodep" />

  <target name="clean" depends="clean-lib,clean-dist,clean-tests" description="Cleans the project">
    <subant target="clean" buildpathref="build.path" />
    <antcall target="clean-build" />
  </target>

  <target name="clean-lib" description="Cleans the library path" unless="clean.lib.disabled">
    <delete includeemptydirs="true" failonerror="false" dir="${lib.dir}" />
  </target>
  <target name="clean-dist" description="Cleans the distribution folder">
    <delete includeemptydirs="true" failonerror="false" dir="${dist.dir}" />
  </target>
  <target name="clean-build" description="Cleans the build folder">
    <delete includeemptydirs="true" failonerror="false" dir="${build.dir}" />
  </target>
  <target name="clean-tests" description="Cleans the test output folders">
    <delete includeemptydirs="true" failonerror="false" dir="${basedir}/TestResults" />
  </target>

  <target name="clean-src" description="Cleans the auto-generated source code files">
    <subant target="clean-src" buildpathref="build.path">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
  </target>

  <target name="fudge-proto" description="Autogenerates files from Fudge .proto definitions">
    <subant target="fudge-proto" buildpathref="java.build.path">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
    <subant target="proto-c" buildpathref="java.build.path">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
  </target>

  <target name="joda-bean">
    <!-- TODO -->
  </target>

  <target name="test-batch">
    <!-- TODO -->
  </target>

</project>
