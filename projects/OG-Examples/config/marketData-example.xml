<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
  <property name="ignoreUnresolvablePlaceholders" value="true" />
    <property name="location">
      <value>classpath:marketData-${opengamma.platform.runmode}.properties</value>
    </property>
  </bean>  
  
  <bean id="marketDataProvider" class="com.opengamma.engine.marketdata.InMemoryLKVMarketDataProvider">
    <constructor-arg ref="sharedSecuritySource" />
  </bean>

  <bean id="simulatedMarketDataGenerator" class="com.opengamma.examples.marketdata.SimulatedMarketDataGenerator" init-method="start">
    <constructor-arg ref="marketDataProvider" />
    <constructor-arg value="${opengamma.example.marketdata.file}" />
  </bean>
  
  <!-- User market data -->
  <bean id="userMarketDataProviderFactory" class="com.opengamma.engine.marketdata.snapshot.UserMarketDataProviderFactoryFactoryBean">
    <property name="snapshotSource" ref="combinedSnapshotSource" />
  </bean>

  <!-- Combined market data -->
  <bean id="combinedMarketDataProviderFactory" class="com.opengamma.engine.marketdata.CombinedMarketDataProviderFactoryFactoryBean">
  </bean>
  
  
  <bean id="marketDataProviderFactory" class="com.opengamma.engine.marketdata.SingletonMarketDataProviderFactory">
    <constructor-arg ref="marketDataProvider"/>
  </bean>
  
  <!-- MarketDataProvider resolver -->
  <bean id="marketDataProviderResolver" class="com.opengamma.engine.marketdata.resolver.TypeBasedMarketDataProviderResolverFactoryBean">
    <property name="typesAndProviders">
      <map>
        <entry key="com.opengamma.engine.marketdata.spec.LiveMarketDataSpecification" value-ref="marketDataProviderFactory" />
        <entry key="com.opengamma.engine.marketdata.spec.UserMarketDataSpecification" value-ref="userMarketDataProviderFactory" />
        <entry key="com.opengamma.engine.marketdata.spec.CombinedMarketDataSpecification" value-ref="combinedMarketDataProviderFactory" />
      </map>
    </property>
  </bean>
  
  <!-- Hook up the circular dependency -->
  <bean id="circularMarketDataProviderFactory" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
   <property name="targetObject"><ref local="combinedMarketDataProviderFactory"/></property>
   <property name="targetMethod"><value>setUnderlying</value></property>
   <property name="arguments">
     <list>
     <ref bean="marketDataProviderResolver"/>
     </list>
   </property>
  </bean>
</beans>