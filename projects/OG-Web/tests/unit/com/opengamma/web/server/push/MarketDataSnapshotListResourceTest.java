package com.opengamma.web.server.push;

import com.opengamma.core.marketdatasnapshot.impl.ManageableMarketDataSnapshot;
import com.opengamma.id.UniqueId;
import com.opengamma.master.marketdatasnapshot.MarketDataSnapshotDocument;
import com.opengamma.master.marketdatasnapshot.MarketDataSnapshotMaster;
import com.opengamma.master.marketdatasnapshot.MarketDataSnapshotSearchRequest;
import com.opengamma.master.marketdatasnapshot.MarketDataSnapshotSearchResult;
import com.opengamma.master.marketdatasnapshot.impl.InMemorySnapshotMaster;
import com.opengamma.util.tuple.Pair;
import com.opengamma.web.server.push.rest.MarketDataSnapshotListResource;
import org.eclipse.jetty.server.Server;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.web.context.WebApplicationContext;
import org.testng.annotations.Test;

import java.util.Arrays;
import java.util.List;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.testng.AssertJUnit.assertEquals;

public class MarketDataSnapshotListResourceTest {

  private static MarketDataSnapshotDocument createSnapshot(String basisViewName, String name, UniqueId uid) {
    ManageableMarketDataSnapshot snapshot = new ManageableMarketDataSnapshot();
    snapshot.setBasisViewName(basisViewName);
    snapshot.setName(name);
    snapshot.setUniqueId(uid);
    return new MarketDataSnapshotDocument(snapshot);
  }

  private static MarketDataSnapshotListResource createResource(MarketDataSnapshotDocument... docs) {
    MarketDataSnapshotMaster snapshotMaster = mock(MarketDataSnapshotMaster.class);
    MarketDataSnapshotSearchRequest snapshotSearchRequest = new MarketDataSnapshotSearchRequest();
    snapshotSearchRequest.setIncludeData(false);
    List<MarketDataSnapshotDocument> documents = Arrays.asList(docs);
    MarketDataSnapshotSearchResult result = new MarketDataSnapshotSearchResult(documents);
    when(snapshotMaster.search(snapshotSearchRequest)).thenReturn(result);
    return new MarketDataSnapshotListResource(snapshotMaster);
  }

  @Test
  public void getJson() throws JSONException {
    MarketDataSnapshotListResource resource = createResource(
        createSnapshot("basisView1", "snap1", UniqueId.of("Tst", "1")),
        createSnapshot("basisView1", "snap2", UniqueId.of("Tst", "2")),
        createSnapshot("basisView2", "snap3", UniqueId.of("Tst", "3")));

    JSONObject json = new JSONObject(resource.getMarketDataSnapshotList());
    JSONObject basisView1 = json.getJSONObject("basisView1");
    assertEquals("snap1", basisView1.get("Tst~1"));
    assertEquals("snap2", basisView1.get("Tst~2"));
    JSONObject basisView2 = json.getJSONObject("basisView2");
    assertEquals("snap3", basisView2.get("Tst~3"));
  }

  @Test
  public void snapshotWithBlankNameNotReturned() throws JSONException {
    MarketDataSnapshotListResource resource = createResource(
        createSnapshot("basisView", null, UniqueId.of("Tst", "1")),
        createSnapshot("basisView", "", UniqueId.of("Tst", "2")));

    JSONObject json = new JSONObject(resource.getMarketDataSnapshotList());
    assertEquals(0, json.length());
  }

  @Test
  public void snapshotWithNullIdNotReturned() throws JSONException {
    MarketDataSnapshotListResource resource = createResource(
        createSnapshot("basisView", "snap", null));

    JSONObject json = new JSONObject(resource.getMarketDataSnapshotList());
    assertEquals(0, json.length());
  }

  @Test
  public void snapshotWithAutoGeneratedNameNotReturned() throws JSONException {
    MarketDataSnapshotListResource resource = createResource(
        createSnapshot("basisView", "{12345678-1234-abcd-cdef-0123456789ab}", UniqueId.of("Tst", "1")),
        createSnapshot("basisView", "12345678-1234-abcd-cdef-0123456789ab", UniqueId.of("Tst", "2")));

    JSONObject json = new JSONObject(resource.getMarketDataSnapshotList());
    assertEquals(0, json.length());
  }

  @Test
  public void getJsonOverHttp() throws Exception {
    Pair<Server, WebApplicationContext> serverAndContext =
        WebPushTestUtils.createJettyServer("classpath:/com/opengamma/web/server/push/marketdatasnapshotlist-test.xml");
    Server server = serverAndContext.getFirst();
    WebApplicationContext context = serverAndContext.getSecond();
    InMemorySnapshotMaster snapshotMaster = context.getBean(InMemorySnapshotMaster.class);
    snapshotMaster.add(createSnapshot("basisView1", "snap1", null));
    JSONObject json = new JSONObject(WebPushTestUtils.readFromPath("/jax/marketdatasnapshots"));
    JSONObject basisView1Snapshots = json.getJSONObject("basisView1");
    assertEquals("snap1", basisView1Snapshots.getString("MemSnap~1"));
    server.stop();
  }
}
